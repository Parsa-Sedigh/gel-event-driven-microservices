# We don't keep configs in the microservices themselves. We move them to config-server.

#twitter-to-kafka-service:
#  twitter-keywords:
#    - Java
#    - Microservices
#    - Spring
#    - Kafka
#    - Elasticsearch
#  welcome-message: Hello microservice!
#  twitter-v2-base-url: https://api.twitter.com/2/tweets/search/stream?tweet.fields=created_at&expansions=author_id
#  twitter-v2-rules-base-url: https://api.twitter.com/2/tweets/search/stream/rules
#
#  # TWITTER_BEARER_TOKEN env variable. Use export TWITTER_BEARER_TOKEN=... or better update env variables permanently with the value
#  # and then restart intellij.
#  twitter-v2-bearer-token: ${TWITTER_BEARER_TOKEN}
#  #  enable-v2-tweets: false
#  enable-mock-tweets: true
#  mock-min-tweet-length: 5
#  mock-max-tweet-length: 15
#  mock-sleep-ms: 10000
#
#retry-config:
#  initial-interval-ms: 1000
#  max-interval-ms: 10000
#  multiplier: 2.0
#  max-attempts: 3
#  sleep-time-ms: 2000
#
#kafka-config:
#  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
#  schema-registry-url-key: schema.registry.url
#  schema-registry-url: http://localhost:8081
#  topic-name: twitter-topic
#
#  # we create these topics programmatically at runtime
#  topic-names-to-create:
#    - twitter-topic
#  num-of-partitions: 3
#  replication-factor: 3
#
#kafka-producer-config:
#  key-serializer-class: org.apache.kafka.common.serialization.LongSerializer
#  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
#  compression-type: snappy
#
#  # we want to get acknowledgements from all replicas to be more resilient.
#  acks: all
#  batch-size: 16384 # 16kb which is the default value
#
#  # to try different values and see if it performs better or not. We set it to 100 times of the default val to enable
#  # more batching and therefore to get high throughput.
#  batch-size-boost-factor: 100
#
#  # adds a delay on producer in case of light load.
#  linger-ms: 5
#  # if after this timeout, no ack comes, producer will throw timeout error
#  request-timeout-ms: 60000
#  retry-count: 5
logging:
  level:
    root: info
spring:
  application:
    name: twitter-to-kafka-service
  profiles:
    # note: naming is important here. In config-server-repository, the name of the config file for this microservice is:
    # `config-client-twitter_to_kafka` which matches profiles.active .
    active: twitter_to_kafka
  config:
    name: twitter-to-kafka-service,config-client
    import: configserver:http://localhost:8888
  cloud:
    #    config:
    #      username: 123
    config:
      username: 123
      password: 123

  # by using ENC(), spring boot understands that this password is encrypted by using jasypt
#      password: ENC(SJqPr1mrH+MihDeGt1FTNNojX8QyqXJqgE7u4rEx/PhdWim8IaLRtSEV2mQu/ZDN)

# add these to be able to decrypt the passwords at runtime
#jasypt:
#  encryptor:
#    password: ${JASYPT_ENCRYPTOR_PASSWORD}
